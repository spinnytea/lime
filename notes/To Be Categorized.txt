On Programming
  One of the things I want to do ASAP is programming.
  I want to teach the LM to write code, so I don't have to.
  But, for it to be able to write code, it needs to understand the concepts code represents
   - numbers, strings
   - loops, branching
  And it also needs to be able to, ya know, read and write code.
  Reading and Writing code has the advantage that I can use a strict parser for it.
  But that doesn't change the fact that it needs to understand/simplify what it's doing.
  And honestly, if I want to tell it to write a new program, I want to tell it in english.
  So reading and writing in language is a must.
  But first you need to understand the domain (this is starting to get circular, i know)
  ---
  So, first it needs to be able to read and write.
  It needs to be able to express what it knows, and think in hypotheticals
  To read something and build a model of something it doesn't know (to be verified later)
  ---
  So, let's go back to our wumpus example.
  A simulated environment with limited information.
  We can start to having it write out what it knows
   - "I am in Room A"
   - "Room A is connected to Room B. Room B is connected to Room C. The Wumpus is in Room C"
  It can read using that format. (we can start with a strict parser, and expand from there)
  It can write using that format.
  It only needs enough language to express the world.
  I can start teaching it new words.
   - "This map is symmetrical"
   - "This map is in a strict grid pattern" (maybe that doesn't make sense, or is too obvious, but it's still something)
  This language may not carry much information, but it's a start so I can understand the complexities
  It's a first step towards learning how to represent the real world.
  --
  what about a plan that always looks 10 steps out?
  how do we know we are reaching the goal
  this is like min-max
  we need to have a way to weigh the options

  is A* good enough for that?
  we explore different possibilities, and after 10 steps (to 10 difference) we just cut off and pick the best one, then plan again from there
  this would save space, and only save time if our heuristic is good.

  no, in this case, it would be “distanceFromGoal”, you would pick the one that is closest to the goal and just do that

AStar
  how do I tell astar that some plans are wrong?
  like, if I want to specifically avoid doing something?
  what if it's only PART of the plan? (you can't do X and then Y)
  _.isEqual?
  subgraph.stringify?
  what if things are reordered? then there are n! options, what if SOME are valid? (think entering a PIN)
  do I need to come up with some kind of query language for it?
  is it enough to subtract the plans from BlueprintState.availablePlans before we start astar.search?

Planning Backwards
  Right now, we have requirements --transition-> ( ??? )
  This allows us to take actions in the world, and thus plan by going forward
  If we had ( ??? ) <-inverse_transition-- goal_requirements
  This would allow us to plan starting with the goal and move backwards
  Generally speaking, planning FROM the goal and FINDING the start has a much lower branching factor
  --
  I did this in the preliminary java version, but didn't carry it over
  the matching options (matchref) and improved transitions make this hard to infer for free
  which is why I didn't do this at first
  it's almost like we need to create a second matcher/transition for the other direction
  --
  can we automatically calculate the expected goal? (do a rewrite on the requirements)
  can we automatically reverse the rewrite? (we need a different reversal for each type of rewrite)
Make it atomic
  when we create a plan (SerialAction composed of ActuatorActions)
  this means, "ignore the scheduler/conditions, and just do it all at once"
  in this case, ignore the condition/senses and just do the whole thing
  if, after the proper waiting, the goal is met, then we count it as a success
  whenever the goal is not met, then we need to record it, and that action cannot be atomic
  --
  we can do science and figure out which parts can be atomic
  like, maybe the serial plan has serial plans; maybe the inner ones can be atomic
  actually this is probably a bad idea
  but when would we call this "make it atomic" function ... if a plan NEVER has a problem completing?
  like, if we've run it 10 times and it just works, then we can elevate it?
Planning direction
  which is better? planning from goal to start, or planning from start to goal?
  they are probably both the same cost
  people say that "typically, going from goal to start has a smaller branching factor"
  what about a random maze? are actuators more confined than that?
  --
  going from goal to start requires defining transitions twice (unless we can figure out a standard way to create an inverse transition)
  recovering from a plan will be different, which is more efficient?
    planning forward with arbitrary goals? arbitrary plans from various goals to one starting point
    i think the key is that we can't keep the arbitary goals when planning forward
    does this mean that planning backwards is easily invalidated?
Data Scale
  Knowledge
    When working with the database directly (task list)
    I am going to save each idea one at a time, but I'm going to do so up to n times.
    Saving is O(1)*O(n) = O(n)
    I am going to query for the data, and it will return n items each times, and I'm going to do this n times.
    Access is O(n)*O(n) = O(n^2).
  Actions
    When we incorporate actions (wumpus)
    I am going to save a whole state, and this will happen n times.
    Saving is O(n^2)
    I am going to access a whole state, with some large branching factor
    time*state*branching
    Access is O(n^3)
  Experience
    When we incorporate learning into wumpus
    I am going to run through n states
    time*state*repetition
    Saving is O(n^3)
    Access is O(n^?)
